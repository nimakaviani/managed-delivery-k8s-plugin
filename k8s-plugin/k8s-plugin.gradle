apply plugin: "java-library"
apply plugin: "io.spinnaker.plugin.service-extension"
apply plugin: "maven-publish"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    gradlePluginPortal()
    mavenCentral()
    if (property("korkVersion").toString().endsWith("-SNAPSHOT")) {
        mavenLocal()
    }
}

spinnakerPlugin {
    serviceName = "keel"
    pluginClass = "com.amazon.spinnaker.keel.k8s.ManagedDeliveryK8sPlugin"
    requires="keel>=0.0.0"
    description = 'Plugin to enable K8s in Managed Delivery.'
    version = rootProject.version
}

dependencies {
    compileOnly(group: 'org.pf4j', name: 'pf4j', version: "${pf4jVersion}")
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compileOnly (group: 'io.spinnaker.kork', name: 'kork-plugins-api', version: "${korkVersion}")
    compileOnly (group: 'io.spinnaker.kork', name: 'kork-plugins-spring-api', version: "${korkVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-api', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-clouddriver', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-orca', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-core', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-artifact', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-retrofit', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-docker', version: "${keelVersion}")
    compileOnly (group: 'io.spinnaker.keel', name: 'keel-igor', version: "${keelVersion}")
    compileOnly (group: 'org.springframework', name: 'spring-context', version: '5.2.1.RELEASE')
    compileOnly (group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.12.1')

    kapt(group: 'org.pf4j', name: 'pf4j', version: "${pf4jVersion}")
    implementation("io.github.microutils:kotlin-logging:1.12.0")

    testImplementation (group: 'io.spinnaker.keel', name: 'keel-core', version: "${keelVersion}")
    testImplementation (group: 'io.spinnaker.keel', name: 'keel-api', version: "${keelVersion}")
    testImplementation (group: 'io.spinnaker.keel', name: 'keel-orca', version: "${keelVersion}")
    testImplementation (group: 'io.spinnaker.keel', name: 'keel-test', version: "${keelVersion}")
    testImplementation (group: 'io.spinnaker.keel', name: 'keel-artifact', version: "${keelVersion}")
    testImplementation (group: 'io.spinnaker.keel', name: 'keel-docker', version: "${keelVersion}")
    testImplementation ("org.junit.jupiter:junit-jupiter-api:5.5.2")
    testImplementation (group: 'io.strikt', name: 'strikt-core', version: '0.22.1')
    testImplementation (group: 'dev.minutest', name: 'minutest', version: '1.10.0')
    testImplementation (group: 'io.mockk', name: 'mockk', version: '1.9.3')
    testImplementation("dev.minutest:minutest")

    testRuntime ("org.junit.jupiter:junit-jupiter-engine:5.4.0")
    testRuntime ("org.junit.platform:junit-platform-launcher:{$kotlinVersion}")
    testRuntime ("org.junit.platform:junit-platform-commons:1.5.2")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        languageVersion = "1.4"
        jvmTarget = targetCompatibility
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

compileTestKotlin {
    kotlinOptions {
        languageVersion = "1.4"
        jvmTarget = targetCompatibility
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}